'''在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P。并将P对1000000007取模的结果输出。 即输出P%1000000007思路分析：看到这个题目，我们的第一反应是顺序扫描整个数组。每扫描到一个数组的时候，逐个比较该数字和它后面的数字的大小。如果后面的数字比它小，则这两个数字就组成了一个逆序对。假设数组中含有n个数字。由于每个数字都要和O(n)这个数字比较，因此这个算法的时间复杂度为O(n^2)。我们以数组{7,5,6,4}为例来分析统计逆序对的过程。每次扫描到一个数字的时候，我们不拿ta和后面的每一个数字作比较，否则时间复杂度就是O(n^2)，因此我们可以考虑先比较两个相邻的数字。(a) 把长度为4的数组分解成两个长度为2的子数组；(b) 把长度为2的数组分解成两个成都为1的子数组；(c) 把长度为1的子数组 合并、排序并统计逆序对 ；(d) 把长度为2的子数组合并、排序，并统计逆序对；在上图（a）和（b）中，我们先把数组分解成两个长度为2的子数组，再把这两个子数组分别拆成两个长度为1的子数组。接下来一边合并相邻的子数组，一边统计逆序对的数目。在第一对长度为1的子数组{7}、{5}中7大于5，因此（7,5）组成一个逆序对。同样在第二对长度为1的子数组{6}、{4}中也有逆序对（6,4）。由于我们已经统计了这两对子数组内部的逆序对，因此需要把这两对子数组 排序 如上图（c）所示， 以免在以后的统计过程中再重复统计。接下来我们统计两个长度为2的子数组子数组之间的逆序对。合并子数组并统计逆序对的过程如下图如下图所示。我们先用两个指针分别指向两个子数组的末尾，并每次比较两个指针指向的数字。如果第一个子数组中的数字大于第二个数组中的数字，则构成逆序对，并且逆序对的数目等于第二个子数组中剩余数字的个数，如下图（a）和（c）所示。如果第一个数组的数字小于或等于第二个数组中的数字，则不构成逆序对，如图b所示。每一次比较的时候，我们都把较大的数字从后面往前复制到一个辅助数组中，确保 辅助数组（记为copy） 中的数字是递增排序的。在把较大的数字复制到辅助数组之后，把对应的指针向前移动一位，接下来进行下一轮比较。'''# -*- coding:utf-8 -*-class Solution:    def InversePairs(self, data):        copy = list(data)        length = len(data)        return self._inverse_pairs_core(data, copy, 0, length - 1)        pass    def _inverse_pairs_core(self, data, copy, start, end):        # 只有一个元素的时候终止递归        if start == end:            copy[start] = data[start]            return 0        # 子数组逆序对数目        length = (end - start) // 2        left = self._inverse_pairs_core(data, copy, start, start + length)        right = self._inverse_pairs_core(data, copy, start + length + 1, end)        # 归并排序        i = start + length        j = end        copy_index = end        # 逆序的数目        count = left + right        while i >= start and j >= start + length + 1:            if data[i] >= data[j]:                copy[copy_index] = data[i]                # 更新操作， 后一个数组中剩下的元素                count += j - start - length            else:                copy[copy_index] = data[j]            copy_index -= 1            i -= 1            j -= 1            pass        while i >= start:            copy[copy_index] = data[i]            copy_index -= 1            i -= 1            pass        while j >= start + length + 1:            copy[copy_index] = data[j]            copy_index -= 1            j -= 1            pass        return count        pass    passif __name__ == '__main__':    Solution().InversePairs([        364,637,341,406,747,995,234,971,571,219,993,407,416,366,315,301,601,650,        418,355,460,505,360,965,516,648,727,667,465,849,455,181,486,149,588,233,        144,174,557,67,746,550,474,162,268,142,463,221,882,576,604,739,288,569,        256,936,275,401,497,82,935,983,583,523,697,478,147,795,380,973,958,115,        773,870,259,655,446,863,735,784,3,671,433,630,425,930,64,266,235,187,        284,665,874,80,45,848,38,811,267,575    ])
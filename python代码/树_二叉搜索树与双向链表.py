'''输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表要求不能创建任何新的结点，只能调整树中结点指针的指向。解题思路：1.将左子树构造成双链表， 并返回链表头节点。2.定位至左子树双链表最后一个节点。3.如果左子树链表不为空的话，将当前root追加到左子树链表。4.将右子树构造成双链表，并返回链表头节点。5.如果右子树链表不为空的话，将该链表追加到root节点之后。6.根据左子树链表是否为空确定返回的节点。'''# -*- coding:utf-8 -*-class TreeNode:    def __init__(self, x):        self.val = x        self.left = None        self.right = None        passclass Solution:    def Convert(self, pRootOfTree):        last_node = None        self._convert(pRootOfTree, last_node)        head = last_node        while head != None and head.left != None:            head = head.left        return head    def _convert(self, root, last_node):        if root == None:            return        # 定位至左子树双链表最后一个节点。        # 如果左子树链表不为空的话，将当前root追加到左子树链表。        if root.left != None:            self._convert(root.left, last_node)        # 将右子树构造成双链表，并返回链表头节点。        root.left = last_node        if last_node:            last_node.right = root        last_node = root        # 如果右子树链表不为空的话，将该链表追加到root节点之后。        if root.right != None:            self._convert(root.right, last_node)        pass    pass
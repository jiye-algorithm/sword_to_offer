# coding=utf-8'''给定一个数组A[0,1,...,n-1],请构建一个数组B[0,1,...,n-1],其中B中的元素B[i]=A[0]*A[1]*...*A[i-1]*A[i+1]*...*A[n-1]。不能使用除法。'''# -*- coding:utf-8 -*-class Solution:    def multiply(self, A):        '''        很帅气的动态规划解法        '''        first = [1] * len(A)   # A[0] * ... * A[i - 1]        second = [1] * len(A)  # A[i + 1] * ... * A[n - 1]        for i in range(1, len(A)):            first[i] = first[i - 1] * A[i - 1]        temp = 1        for i in reversed(range(0, len(A) - 1)):            temp *= A[i + 1]            second[i] *= temp        return [first[i] * second[i] for i in range(len(A))]        pass    passif __name__ == '__main__':    Solution().multiply([1, 2, 3, 4, 5])
'''把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。'''# -*- coding:utf-8 -*-class Solution:    def minNumberInRotateArray(self, rotateArray):        '''        自己实现的代码 n的时间复杂度        以第一个元素为比较基准，从后向前遍历第一个大于基准元素的元素，后一个元素就是我们的最小值        '''        if rotateArray == None or rotateArray == []:            return 0        # 最后一个        min = len(rotateArray) - 1        # 基准元素的比较        while rotateArray[min] < rotateArray[0]:            min -= 1            pass        # 同一个元素        if min == 0:            return rotateArray[min]        # 找到元素的后一个元素        return rotateArray[(min + 1) % len(rotateArray)]    def minNumberInRotateArray_book1(self, rotateArray):        '''        书本上参考代码 lgn时间复杂度，二分查找        这里考虑明显全面        使用两个指针：第一个指向前一个数组中更大的值                      第二个指向后一个数组中更小的值        二分查找一直更新这两个指针，指导这两个指针相邻，第一个指针会指向第一个数组中最大值，第二指针会指向第二个数组中的最小值        '''        first = 0        last = len(rotateArray) - 1        # 没有交换        mid = first        while rotateArray[first] > rotateArray[last]:            # 找到了            if last - first == 1:                mid = last                break            mid = (first + last) // 2            # 如果三个元素都相等， 无法判断哪个区间            if rotateArray[first] == rotateArray[mid] == rotateArray[last]:                return self.min_in_order(rotateArray[first : last])            # 中间值应该是最小值，            if rotateArray[mid] >= rotateArray[first]:                first = mid            elif rotateArray[mid] <= rotateArray[last]:                last = mid        return rotateArray[mid]    # 查找数组中的最小元素    def min_in_order(self, rotateArray):        result = rotateArray[0]        for item in rotateArray:            if item < result:                result = item        return result    passif __name__ == '__main__':    '''    测试用例：        * 数组为None        * 数组为空 返回0        * 多个元素        * 只有一个元素    '''    '''    书中测试用例的选择：        * 功能测试（输入的数组是升序排序数组的一个旋转，数组中有重复数字或者没有重复数字）        * 边界值测试（输入的数组是一个升序排序的数组，只包含一个数字的数组）        * 特殊输入测试（输入NULL指针）    '''    solution = Solution()    print(solution.minNumberInRotateArray([]))    print(solution.minNumberInRotateArray(None))    print(solution.minNumberInRotateArray_book1([2]))    print(solution.minNumberInRotateArray([3, 4, 5, 1, 2]))    print()    pass
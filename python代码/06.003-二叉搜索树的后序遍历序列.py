'''输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。BST的后序序列的合法序列是，对于一个序列S，最后一个元素是x （也就是根），如果去掉最后一个元素的序列为T，那么T满足：T可以分成两段，前一段（左子树）小于x，后一段（右子树）大于x，且这两段（子树）都是合法的后序序列。完美的递归定义 : ) 。'''# -*- coding:utf-8 -*-class Solution:    def VerifySquenceOfBST(self, sequence):        if sequence == None or len(sequence) == 0:            return False        # 找到第一个根节点大的数的下标，也就是右子树的第一个节点        index = 0        for i, item in enumerate(sequence):            if sequence[-1] <= item:                index = i                break        # 右子树比根节点大        for item in sequence[index:-1]:            if item < sequence[-1]:                return False        # 左子树        left = True        if index > 0:            left = self.VerifySquenceOfBST(sequence[0:index])        # 右子树        right = True        if index < len(sequence) - 1:            right = self.VerifySquenceOfBST(sequence[index:-1])        return left and right    passif __name__ == '__main__':    print(Solution().VerifySquenceOfBST([4,6,7,5]))
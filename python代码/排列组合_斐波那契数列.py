'''大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项。n<=39'''# -*- coding:utf-8 -*-class Solution:    def Fibonacci_recusive(self, n):        '''        时间复杂度 n的指数级增长        '''        return n if n == 0 or n == 1 else self.Fibonacci(n - 1) + self.Fibonacci(n - 2)        pass    def Fibonacci(self, n):        '''        时间复杂度 n        '''        if n == 0 or n == 1:            return n        first = 0        second = 1        result = 0        # while step 然后step+1 这样的方式慢，果然是调用内部方法有优化        for _ in range(2, n + 1):            result = first + second            first, second = second, result        return result    passif __name__ == '__main__':    print(Solution().Fibonacci(39))    pass
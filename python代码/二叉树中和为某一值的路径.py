'''输入一颗二叉树和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。'''# -*- coding:utf-8 -*-class TreeNode:    def __init__(self, x):        self.val = x        self.left = None        self.right = None        passclass Solution:    def __init__(self):        self.path = []        pass    # 返回二维列表，内部每个列表表示找到的路径    def FindPath(self, root, expectNumber):        path = []        sum = 0        self._find_path(root, expectNumber, sum, path)        return self.path        pass    def _find_path(self, root, except_number, sum, path):        path.append(root.val)        sum += root.val        if except_number == sum and not root.left and not root.right:            self.path.append([i for i in path])        if root.left:            self._find_path(root.left, except_number, sum, path)        if root.right:            self._find_path(root.right, except_number, sum, path)        sum -= root.val        path.pop(-1)        pass    pass
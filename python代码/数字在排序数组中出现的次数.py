'''统计一个数字在排序数组中出现的次数。'''# -*- coding:utf-8 -*-class Solution:    def GetNumberOfK(self, data, k):        '''        先找到第一个k出现的位置，然后找到最后一个k出现的位置        '''        if data == None:            return None        length = len(data)        first = self._get_firt_k(data, k, 0, length - 1)        last = self.__get_last_k(data, k, 0, length - 1)        if first != -1 and last != -1:            return last - first + 1        return 0        pass    # 找到第一个k的位置    def _get_firt_k(self, data, k, start, end):        if start > end:            return -1        middle_index = (end + start) // 2        middle_data = data[middle_index]        # 如果中间位置值是k        if middle_data == k:            # 看k是不是第一个出现的：要么其实下标为0，要么中间元素的前一个元素不为k            if (middle_index > 0 and data[middle_index - 1] != k) or middle_index == 0:                return middle_index            else: # 如果中间元素的前一个元素为k，那么第一个k出现是在中间位置以前的                end = middle_index - 1        elif middle_data > k:            end = middle_index - 1        else:            start = middle_index + 1        return self._get_firt_k(data, k, start, end)        pass    # 找到最后一个k的位置    def __get_last_k(self, data, k, start, end):        if start > end:            return -1        middle_index = (end + start) // 2        middle_data = data[middle_index]        # 如果k出现在中间        if middle_data == k:            # 如果中间位置不是结束下标，或者中间元素的下一个元素不是k，那么中间下标就是k的最后一次出现位置            if (middle_index < len(data) - 1 and data[middle_index + 1] != k) or middle_index == len(data) - 1:                return middle_index            else: # 否则，最后一个k出现应该在中间位置的后面                start = middle_index + 1        elif middle_data > k:            end = middle_index - 1        else:            start = middle_index + 1        return self.__get_last_k(data, k, start, end)        pass    passif __name__ == '__main__':    Solution().GetNumberOfK([1,2,3,3,3,3,4,5],3)
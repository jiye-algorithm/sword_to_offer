'''
step1:按位与是查看两个数哪些二进制位都为1，这些都是进位位，结果需左移一位，表示进位后的结果
step2:异或是查看两个数哪些二进制位只有一个为1，这些是非进位位，可以直接加、减，结果表示非进位位进行加操作后的结果
step3:n1&n2是查看有没有进位位了，如果有，需要重复step1、step2；如果没有，保留n1、n2上二进制为1的部分，用或将之合为一个数，即为最后结果
'''
# -*- coding:utf-8 -*-
class Solution:

    def Add(self, num1, num2):

        # 按位与是查看两个数哪些二进制位都为1，这些都是进位位，结果需左移一位，表示进位后的结果
        n1 = (num1 & num2) << 1
        # 异或是查看两个数哪些二进制位只有一个为1，这些是非进位位，可以直接加、减，结果表示非进位位进行加操作后的结果
        n2 = num1 ^ num2
        # 当进位部分和相加部分没有交集的时候，说明可以直接相加了
        while n1 & n2:
            num1 = n1
            num2 = n2
            n1 = (num1 & num2) << 1
            n2 = num1 ^ num2

        return n1 | n2

    pass


if __name__ == '__main__':

    print(Solution().Add(-2, 37))

    pass







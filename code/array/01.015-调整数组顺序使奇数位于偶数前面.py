'''输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变* 1.要想保证原有次序，则只能顺次移动或相邻交换。* 2.i从左向右遍历，找到第一个偶数。* 3.j从i+1开始向后找，直到找到第一个奇数。* 4.将[i,...,j-1]的元素整体后移一位，最后将找到的奇数放入i位置，然后i++。* 5.終止條件：j向後遍歷查找失敗。'''# -*- coding:utf-8 -*-class Solution:    def reOrderArray2(self, array):        '''        利用快排的思路，但是数字相对位置会改变。        '''        odd = len(array) - 1        even = 0        while even < odd:            while array[even] & 1 == 1 and even < odd:                even += 1            while array[odd] & 1 == 0 and even < odd:                odd -= 1            if even != odd:                temp = array[odd]                array[odd] = array[even]                array[even] = temp                pass            pass        return array        pass    def reOrderArray(self, array):        even = 0        odd = 1        while even < odd and odd < len(array):            # 下一个奇数            while odd < len(array) and array[odd] & 1 == 0:                odd += 1            # 下一个偶数            while even < odd and array[even] & 1 == 1:                even += 1            if even == odd or odd == len(array):                break            array[odd], array[even] = array[even], array[odd]            pass        return array    passif __name__ == '__main__':    print(Solution().reOrderArray([1, 2, 3, 4, 5, 6, 7, 8, 9]))    pass
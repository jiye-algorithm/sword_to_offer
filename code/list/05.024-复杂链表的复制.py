'''输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）链接：https://www.nowcoder.com/questionTerminal/f836b2c43afc4b35ad6adc41ec941dba来源：牛客网*解题思路：*1、遍历链表，复制每个结点，如复制结点A得到A1，将结点A1插到结点A后面；*2、重新遍历链表，复制老结点的随机指针给新结点，如A1.random = A.random.next;*3、拆分链表，将链表拆分为原链表和复制后的链表'''# -*- coding:utf-8 -*-class RandomListNode:    def __init__(self, x):        self.label = x        self.next = None        self.random = None        passclass Solution:    # 返回 RandomListNode    def Clone(self, pHead):        if not pHead:            return None        # 1. 遍历链表，复制每个结点，如复制结点A得到A1，将结点A1插到结点A后面；        dummy = pHead        while dummy:            dummy_next = dummy.next            copy_node = RandomListNode(dummy.label)            copy_node.next = dummy_next            dummy.next = copy_node            dummy = dummy_next            pass        # 2、重新遍历链表，复制老结点的随机指针给新结点，如A1.random = A.random.next;        dummy = pHead        while dummy:            dummy_random = dummy.random            copy_node = dummy.next            if dummy_random:                copy_node.random = dummy_random.next            dummy = copy_node.next            pass        # 3、拆分链表，将链表拆分为原链表和复制后的链表, 每次分离出一个元素        dummy = pHead        copy_node = pHead.next        while dummy:            copy_node = dummy.next            dummy_next = copy_node.next            dummy.next = dummy_next            if dummy_next:                copy_node.next = dummy_next.next            else:                copy_node.next = None            dummy = dummy_next        return copy_node